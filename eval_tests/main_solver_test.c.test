/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main_solver_test.c                                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jnivala <jnivala@student.hive.fi>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2020/07/22 20:07:11 by vheiskan          #+#    #+#             */
/*   Updated: 2020/07/29 13:07:25 by jnivala          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fcntl.h"
#include "unistd.h"
#include "../libft/libft.h"
#include "fillit.h"
#include <time.h>
#include <stdio.h>

int				main(int xs_size, char **xs)
{
	t_pieces			pieces;
	t_board				solution;
	struct timespec		start[101];
	struct timespec		stop[101];
	long int			nanoseconds[101];
	long int			average;
	int			i;

	i = 0;
	if (xs_size == 1)
	{
		ft_putendl("fillit: missing file operand");
		ft_putendl("Please type name of the file as a first parameter.");
		return (-1);
	}
	if (xs_size > 2)
	{
		ft_putendl("fillit: invalid number of file operands");
		ft_putendl("Please type only one parameter ie.: ./fillit text.txt");
		return (-1);
	}
	if (fi_pieces_new(&pieces, xs[1]) == ft_false)
	{
		ft_putendl("error");
		return (-1);
	}
	while (i < 100)
	{
		clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &start[i]);
		if(!(fi_solver(&pieces, &solution)))
			return (-1);
		clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &stop[i]);
		if (i == 0)
			fi_print_a_board(&solution);
		nanoseconds[i] = (long int)(stop[i].tv_nsec - start[i].tv_nsec);
		free(solution.squares);
		i++;
	}
	i = 0;
	while (i < 100)
	{
		average += (long int)nanoseconds[i];
		i++;
	}
	average = average / 100;
	ft_putstr("It took ");
	ft_putnbr((int)average);
	ft_putstr(" nanoseconds \n");
	ft_putchar('\n');
	return (0);
}
